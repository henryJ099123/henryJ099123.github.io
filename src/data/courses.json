[
    {
      "id": 0,
      "name": "Fundamentals of Computing",
      "name_italian": "Fondamenti dell'informatica",
      "description": "This is an introductory programming and C course that covered the fundamentals up to and including pointers. Example projects from the class are a Conway's Game of Life simulator, a crossword puzzle generator, fractal designs, and a final project, for which I remade Tetris using X11 graphics. Click on the gif to download it yourself (I still play it from time to time)!",
      "description_italian": "Questo è un corso introduttivo sulla programmazione e su C che introduce i principi fondamentali dell'informatica, dalla formulazione di un problema all'analisi al disegno, implementazione, e collaudo su un computer. Il corso copre i fondamenti di C fino ad includere i pointer. Progetti di esempio sono un simulatore di Conway's Game of Life, un generatore di cruciverba, frattali, e un progetto finale per cui ho rifatto Tetris. Clicca sul gif per caricarlo (gioco ancora ogni tanto!).",
      "image": "tetris_game.gif",
      "link": "https://github.com/henryJ099123/tetrisClone"
    },
    {
      "id": 1,
      "name": "Systems Programming",
      "name_italian": "Programmazione dei sistemi",
      "description": "In this class, I learned the ins and outs of regular expressions, the command line, and the shell, as well as going deeper into Python and C. I learned to parse different data formats such as JSON, YAML, and XML, but the coolest part was building a client-server connection. The client was an interactive C program that queried a Python server to parse a JSON file. The Python server sent the requests back CSV-formatted over a ZMQ socket.",
      "description_italian": "In questo corso, ho imparato i dettagli di espressioni regolari, la riga di comando e la shell, e inoltre degli usi tecnici sia di entrambi Python che C. Ho imparato diverse formatte di data come JSON, YAML e XML e come analissarli. Il corso è concluso con lo sviluppo di un sistema client-server dove il cliente era un programma interattivo C che fa una query al server Python per analizzare un file JSON. Il server ha inviato le richieste formatte come un CSV su un socket ZMQ."
    },
    {
      "id": 2,
      "name": "Abstract Algebra",
      "name_italian": "Algebra astratta",
      "description": "This is a traditional abstract algebra course that studies groups, rings and fields. The class covered permutations, modular arithmetic, cryptography, cyclic and dihedral groups, Lagrange's theorem, homomorphisms, ideals, and integral domains. My <a href=\"/finalProject.pdf\" target=\"_blank\">final paper</a> for the class researched Boolean algebras and culminated in a proof of isomorphism between Boolean algebras, Boolean rings, and the power set.",
      "description_italian": "Un'introduzzione ai gruppi, anelli e campi. Argomenti includono permutazioni, divisibilità, aritmetica modulare, crittografia, gruppi ciclici e diedrali, teorema di Lagrange, omomorfismi, ideale, dominio d'integrità, estensioni di campi. Il mio <a href=\"/finalProject.pdf\" target=\"_blank\">saggio finale</a> per il corso erea una ricerca e discussione su algebre di Boole che culminato in una dimostrazione dell'isomorfismo fra le algebra di Boole e l'insieme delle parti e fra gli anelli di Boole e l'insieme delle parti.",
      "embed": "https://drive.google.com/file/d/12lh-QFI0xYgoo7pAFhfDKFNCwTZmITbM/preview",
      "link": "/finalProject.pdf"
    },
    {
        "id": 3,
        "name": "Operating Systems Principles",
        "description": "This course covers three important themes of operating systems: virtualization, concurrency, and persistence. In this class, we cover system calls, OS scheduling and different scheduling algorithms, concurrency via events and threads, virtual memory, the file system, and more. I've implemented a process queue shell in C that allows the user to simulate running background processes on multiple cores via FIFO, Round Robin, and MLFQ, but the next projects involve a server hosting a chat service, an implementation of <code>malloc</code>, and a file system."
    },
    {
      "id": 4,
      "name": "Theory of Computing",
      "name_italian":"Teoria del calcolo",
      "description": "This course introduced computability theory, formal languages and automata, and complexity theory with the goal of understanding the limits of various computational models such as finite automata, pushdown automata, context-free grammars, and Turing machines. Some topics we covered were undecidability, the classes P and NP, reduction, and NP completeness.<br></br>For the class, I designed in a group a nondeterministic finite automata simulator, a regular expression parser and matcher similar to grep which uses that NFA simulator, a sed-like editor with a complimentary Turing machine simulator, and a regex matcher with backreferences. We also proved the regex matcher with backreferences was NP-complete by building a SAT solver through regular expression matching with backreferences.",
      "description_italian": "Introduzione ai linguaggi formali e automi, la teoria della computabilità, e la teoria della complessità con lo scopo di capire la potenza e i limiti dei modelli computazionali diversi. Argomenti includono i linguaggi regolari e automi a stati finiti,  "
    },
    {
      "id": 5,
      "name": "Passage to Italy",
      "description": "This is a fifth-semester Italian class to refine grammar and understand Italian culture from the 11th century onward. I read literature from ancient authors (e.g. Dante, Cavalcanti, San Francesco d'Assisi), analyzed art of the Renaissance and Baroque periods (e.g. Michelangelo, Raffaelo, Caravaggio), compared those eras to recent authors and art movements (Leopardi, Primo Levi, futurismo) and studied Italian history to boot (reunification, Risorgimento). Check out my final paper, a comparison of Michelangelo's <i>Pietà</i>, <a href=\"/le_pieta.pdf\" target=\"_blank\"<a>here</a>."
    },
    {
        "id": 6,
        "name": "Compilers and Language Design",
        "description": "This class involves building a compiler for a C-like language called B-minor from scratch. So far, we've built a scanner using Flex, implemented a string encoder and decoder for various escapec codes, and learned about different parsing techniques regarding LL(1) and LR(1) grammars. We will ultimately build a shift-reduce parser to transform source code into an abstract syntax tree to then generate x86 assembly code in the codegen phase."
    },
    {
        "id": 7,
        "name": "Undergraduate Research in Computer Graphics",
        "description": "Under Professor Daniel Rehberg, I'm working on a project simulating Aeolian sand simulations using OpenGL with 3 other undergraduates. From this project, I'm learning some professional software development techniques, studying the graphics pipeline, practicing my shaders, and hopefully generating some cool-looking sand graphics."
    } 
  ]
